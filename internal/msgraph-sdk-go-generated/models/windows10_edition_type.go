// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models
// Windows 10 Edition type.
type Windows10EditionType int

const (
    // Windows 10 Enterprise
    WINDOWS10ENTERPRISE_WINDOWS10EDITIONTYPE Windows10EditionType = iota
    // Windows 10 EnterpriseN
    WINDOWS10ENTERPRISEN_WINDOWS10EDITIONTYPE
    // Windows 10 Education
    WINDOWS10EDUCATION_WINDOWS10EDITIONTYPE
    // Windows 10 EducationN
    WINDOWS10EDUCATIONN_WINDOWS10EDITIONTYPE
    // Windows 10 Mobile Enterprise
    WINDOWS10MOBILEENTERPRISE_WINDOWS10EDITIONTYPE
    // Windows 10 Holographic Enterprise
    WINDOWS10HOLOGRAPHICENTERPRISE_WINDOWS10EDITIONTYPE
    // Windows 10 Professional
    WINDOWS10PROFESSIONAL_WINDOWS10EDITIONTYPE
    // Windows 10 ProfessionalN
    WINDOWS10PROFESSIONALN_WINDOWS10EDITIONTYPE
    // Windows 10 Professional Education
    WINDOWS10PROFESSIONALEDUCATION_WINDOWS10EDITIONTYPE
    // Windows 10 Professional EducationN
    WINDOWS10PROFESSIONALEDUCATIONN_WINDOWS10EDITIONTYPE
    // Windows 10 Professional for Workstations
    WINDOWS10PROFESSIONALWORKSTATION_WINDOWS10EDITIONTYPE
    // Windows 10 Professional for Workstations N
    WINDOWS10PROFESSIONALWORKSTATIONN_WINDOWS10EDITIONTYPE
)

func (i Windows10EditionType) String() string {
    return []string{"windows10Enterprise", "windows10EnterpriseN", "windows10Education", "windows10EducationN", "windows10MobileEnterprise", "windows10HolographicEnterprise", "windows10Professional", "windows10ProfessionalN", "windows10ProfessionalEducation", "windows10ProfessionalEducationN", "windows10ProfessionalWorkstation", "windows10ProfessionalWorkstationN"}[i]
}
func ParseWindows10EditionType(v string) (any, error) {
    result := WINDOWS10ENTERPRISE_WINDOWS10EDITIONTYPE
    switch v {
        case "windows10Enterprise":
            result = WINDOWS10ENTERPRISE_WINDOWS10EDITIONTYPE
        case "windows10EnterpriseN":
            result = WINDOWS10ENTERPRISEN_WINDOWS10EDITIONTYPE
        case "windows10Education":
            result = WINDOWS10EDUCATION_WINDOWS10EDITIONTYPE
        case "windows10EducationN":
            result = WINDOWS10EDUCATIONN_WINDOWS10EDITIONTYPE
        case "windows10MobileEnterprise":
            result = WINDOWS10MOBILEENTERPRISE_WINDOWS10EDITIONTYPE
        case "windows10HolographicEnterprise":
            result = WINDOWS10HOLOGRAPHICENTERPRISE_WINDOWS10EDITIONTYPE
        case "windows10Professional":
            result = WINDOWS10PROFESSIONAL_WINDOWS10EDITIONTYPE
        case "windows10ProfessionalN":
            result = WINDOWS10PROFESSIONALN_WINDOWS10EDITIONTYPE
        case "windows10ProfessionalEducation":
            result = WINDOWS10PROFESSIONALEDUCATION_WINDOWS10EDITIONTYPE
        case "windows10ProfessionalEducationN":
            result = WINDOWS10PROFESSIONALEDUCATIONN_WINDOWS10EDITIONTYPE
        case "windows10ProfessionalWorkstation":
            result = WINDOWS10PROFESSIONALWORKSTATION_WINDOWS10EDITIONTYPE
        case "windows10ProfessionalWorkstationN":
            result = WINDOWS10PROFESSIONALWORKSTATIONN_WINDOWS10EDITIONTYPE
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializeWindows10EditionType(values []Windows10EditionType) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i Windows10EditionType) isMultiValue() bool {
    return false
}
