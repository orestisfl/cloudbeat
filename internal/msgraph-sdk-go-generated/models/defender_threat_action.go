// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models
// Defenderâ€™s default action to take on detected Malware threats.
type DefenderThreatAction int

const (
    // Apply action based on the update definition.
    DEVICEDEFAULT_DEFENDERTHREATACTION DefenderThreatAction = iota
    // Clean the detected threat.
    CLEAN_DEFENDERTHREATACTION
    // Quarantine the detected threat.
    QUARANTINE_DEFENDERTHREATACTION
    // Remove the detected threat.
    REMOVE_DEFENDERTHREATACTION
    // Allow the detected threat.
    ALLOW_DEFENDERTHREATACTION
    // Allow the user to determine the action to take with the detected threat.
    USERDEFINED_DEFENDERTHREATACTION
    // Block the detected threat.
    BLOCK_DEFENDERTHREATACTION
)

func (i DefenderThreatAction) String() string {
    return []string{"deviceDefault", "clean", "quarantine", "remove", "allow", "userDefined", "block"}[i]
}
func ParseDefenderThreatAction(v string) (any, error) {
    result := DEVICEDEFAULT_DEFENDERTHREATACTION
    switch v {
        case "deviceDefault":
            result = DEVICEDEFAULT_DEFENDERTHREATACTION
        case "clean":
            result = CLEAN_DEFENDERTHREATACTION
        case "quarantine":
            result = QUARANTINE_DEFENDERTHREATACTION
        case "remove":
            result = REMOVE_DEFENDERTHREATACTION
        case "allow":
            result = ALLOW_DEFENDERTHREATACTION
        case "userDefined":
            result = USERDEFINED_DEFENDERTHREATACTION
        case "block":
            result = BLOCK_DEFENDERTHREATACTION
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializeDefenderThreatAction(values []DefenderThreatAction) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i DefenderThreatAction) isMultiValue() bool {
    return false
}
