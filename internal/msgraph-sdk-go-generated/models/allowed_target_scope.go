// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models
type AllowedTargetScope int

const (
    NOTSPECIFIED_ALLOWEDTARGETSCOPE AllowedTargetScope = iota
    SPECIFICDIRECTORYUSERS_ALLOWEDTARGETSCOPE
    SPECIFICCONNECTEDORGANIZATIONUSERS_ALLOWEDTARGETSCOPE
    SPECIFICDIRECTORYSERVICEPRINCIPALS_ALLOWEDTARGETSCOPE
    ALLMEMBERUSERS_ALLOWEDTARGETSCOPE
    ALLDIRECTORYUSERS_ALLOWEDTARGETSCOPE
    ALLDIRECTORYSERVICEPRINCIPALS_ALLOWEDTARGETSCOPE
    ALLCONFIGUREDCONNECTEDORGANIZATIONUSERS_ALLOWEDTARGETSCOPE
    ALLEXTERNALUSERS_ALLOWEDTARGETSCOPE
    UNKNOWNFUTUREVALUE_ALLOWEDTARGETSCOPE
)

func (i AllowedTargetScope) String() string {
    return []string{"notSpecified", "specificDirectoryUsers", "specificConnectedOrganizationUsers", "specificDirectoryServicePrincipals", "allMemberUsers", "allDirectoryUsers", "allDirectoryServicePrincipals", "allConfiguredConnectedOrganizationUsers", "allExternalUsers", "unknownFutureValue"}[i]
}
func ParseAllowedTargetScope(v string) (any, error) {
    result := NOTSPECIFIED_ALLOWEDTARGETSCOPE
    switch v {
        case "notSpecified":
            result = NOTSPECIFIED_ALLOWEDTARGETSCOPE
        case "specificDirectoryUsers":
            result = SPECIFICDIRECTORYUSERS_ALLOWEDTARGETSCOPE
        case "specificConnectedOrganizationUsers":
            result = SPECIFICCONNECTEDORGANIZATIONUSERS_ALLOWEDTARGETSCOPE
        case "specificDirectoryServicePrincipals":
            result = SPECIFICDIRECTORYSERVICEPRINCIPALS_ALLOWEDTARGETSCOPE
        case "allMemberUsers":
            result = ALLMEMBERUSERS_ALLOWEDTARGETSCOPE
        case "allDirectoryUsers":
            result = ALLDIRECTORYUSERS_ALLOWEDTARGETSCOPE
        case "allDirectoryServicePrincipals":
            result = ALLDIRECTORYSERVICEPRINCIPALS_ALLOWEDTARGETSCOPE
        case "allConfiguredConnectedOrganizationUsers":
            result = ALLCONFIGUREDCONNECTEDORGANIZATIONUSERS_ALLOWEDTARGETSCOPE
        case "allExternalUsers":
            result = ALLEXTERNALUSERS_ALLOWEDTARGETSCOPE
        case "unknownFutureValue":
            result = UNKNOWNFUTUREVALUE_ALLOWEDTARGETSCOPE
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializeAllowedTargetScope(values []AllowedTargetScope) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i AllowedTargetScope) isMultiValue() bool {
    return false
}
