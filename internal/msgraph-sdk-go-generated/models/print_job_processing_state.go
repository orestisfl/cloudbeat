// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models
type PrintJobProcessingState int

const (
    UNKNOWN_PRINTJOBPROCESSINGSTATE PrintJobProcessingState = iota
    PENDING_PRINTJOBPROCESSINGSTATE
    PROCESSING_PRINTJOBPROCESSINGSTATE
    PAUSED_PRINTJOBPROCESSINGSTATE
    STOPPED_PRINTJOBPROCESSINGSTATE
    COMPLETED_PRINTJOBPROCESSINGSTATE
    CANCELED_PRINTJOBPROCESSINGSTATE
    ABORTED_PRINTJOBPROCESSINGSTATE
    UNKNOWNFUTUREVALUE_PRINTJOBPROCESSINGSTATE
)

func (i PrintJobProcessingState) String() string {
    return []string{"unknown", "pending", "processing", "paused", "stopped", "completed", "canceled", "aborted", "unknownFutureValue"}[i]
}
func ParsePrintJobProcessingState(v string) (any, error) {
    result := UNKNOWN_PRINTJOBPROCESSINGSTATE
    switch v {
        case "unknown":
            result = UNKNOWN_PRINTJOBPROCESSINGSTATE
        case "pending":
            result = PENDING_PRINTJOBPROCESSINGSTATE
        case "processing":
            result = PROCESSING_PRINTJOBPROCESSINGSTATE
        case "paused":
            result = PAUSED_PRINTJOBPROCESSINGSTATE
        case "stopped":
            result = STOPPED_PRINTJOBPROCESSINGSTATE
        case "completed":
            result = COMPLETED_PRINTJOBPROCESSINGSTATE
        case "canceled":
            result = CANCELED_PRINTJOBPROCESSINGSTATE
        case "aborted":
            result = ABORTED_PRINTJOBPROCESSINGSTATE
        case "unknownFutureValue":
            result = UNKNOWNFUTUREVALUE_PRINTJOBPROCESSINGSTATE
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializePrintJobProcessingState(values []PrintJobProcessingState) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i PrintJobProcessingState) isMultiValue() bool {
    return false
}
