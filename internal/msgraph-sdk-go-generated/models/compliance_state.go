// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models
// Compliance state.
type ComplianceState int

const (
    // Unknown.
    UNKNOWN_COMPLIANCESTATE ComplianceState = iota
    // Compliant.
    COMPLIANT_COMPLIANCESTATE
    // Device is non-compliant and is blocked from corporate resources.
    NONCOMPLIANT_COMPLIANCESTATE
    // Conflict with other rules.
    CONFLICT_COMPLIANCESTATE
    // Error.
    ERROR_COMPLIANCESTATE
    // Device is non-compliant but still has access to corporate resources
    INGRACEPERIOD_COMPLIANCESTATE
    // Managed by Config Manager
    CONFIGMANAGER_COMPLIANCESTATE
)

func (i ComplianceState) String() string {
    return []string{"unknown", "compliant", "noncompliant", "conflict", "error", "inGracePeriod", "configManager"}[i]
}
func ParseComplianceState(v string) (any, error) {
    result := UNKNOWN_COMPLIANCESTATE
    switch v {
        case "unknown":
            result = UNKNOWN_COMPLIANCESTATE
        case "compliant":
            result = COMPLIANT_COMPLIANCESTATE
        case "noncompliant":
            result = NONCOMPLIANT_COMPLIANCESTATE
        case "conflict":
            result = CONFLICT_COMPLIANCESTATE
        case "error":
            result = ERROR_COMPLIANCESTATE
        case "inGracePeriod":
            result = INGRACEPERIOD_COMPLIANCESTATE
        case "configManager":
            result = CONFIGMANAGER_COMPLIANCESTATE
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializeComplianceState(values []ComplianceState) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i ComplianceState) isMultiValue() bool {
    return false
}
