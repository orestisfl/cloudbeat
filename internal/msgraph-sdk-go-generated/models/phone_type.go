// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models
type PhoneType int

const (
    HOME_PHONETYPE PhoneType = iota
    BUSINESS_PHONETYPE
    MOBILE_PHONETYPE
    OTHER_PHONETYPE
    ASSISTANT_PHONETYPE
    HOMEFAX_PHONETYPE
    BUSINESSFAX_PHONETYPE
    OTHERFAX_PHONETYPE
    PAGER_PHONETYPE
    RADIO_PHONETYPE
)

func (i PhoneType) String() string {
    return []string{"home", "business", "mobile", "other", "assistant", "homeFax", "businessFax", "otherFax", "pager", "radio"}[i]
}
func ParsePhoneType(v string) (any, error) {
    result := HOME_PHONETYPE
    switch v {
        case "home":
            result = HOME_PHONETYPE
        case "business":
            result = BUSINESS_PHONETYPE
        case "mobile":
            result = MOBILE_PHONETYPE
        case "other":
            result = OTHER_PHONETYPE
        case "assistant":
            result = ASSISTANT_PHONETYPE
        case "homeFax":
            result = HOMEFAX_PHONETYPE
        case "businessFax":
            result = BUSINESSFAX_PHONETYPE
        case "otherFax":
            result = OTHERFAX_PHONETYPE
        case "pager":
            result = PAGER_PHONETYPE
        case "radio":
            result = RADIO_PHONETYPE
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializePhoneType(values []PhoneType) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i PhoneType) isMultiValue() bool {
    return false
}
