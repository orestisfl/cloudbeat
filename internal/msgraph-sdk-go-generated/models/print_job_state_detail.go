// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models
type PrintJobStateDetail int

const (
    UPLOADPENDING_PRINTJOBSTATEDETAIL PrintJobStateDetail = iota
    TRANSFORMING_PRINTJOBSTATEDETAIL
    COMPLETEDSUCCESSFULLY_PRINTJOBSTATEDETAIL
    COMPLETEDWITHWARNINGS_PRINTJOBSTATEDETAIL
    COMPLETEDWITHERRORS_PRINTJOBSTATEDETAIL
    RELEASEWAIT_PRINTJOBSTATEDETAIL
    INTERPRETING_PRINTJOBSTATEDETAIL
    UNKNOWNFUTUREVALUE_PRINTJOBSTATEDETAIL
)

func (i PrintJobStateDetail) String() string {
    return []string{"uploadPending", "transforming", "completedSuccessfully", "completedWithWarnings", "completedWithErrors", "releaseWait", "interpreting", "unknownFutureValue"}[i]
}
func ParsePrintJobStateDetail(v string) (any, error) {
    result := UPLOADPENDING_PRINTJOBSTATEDETAIL
    switch v {
        case "uploadPending":
            result = UPLOADPENDING_PRINTJOBSTATEDETAIL
        case "transforming":
            result = TRANSFORMING_PRINTJOBSTATEDETAIL
        case "completedSuccessfully":
            result = COMPLETEDSUCCESSFULLY_PRINTJOBSTATEDETAIL
        case "completedWithWarnings":
            result = COMPLETEDWITHWARNINGS_PRINTJOBSTATEDETAIL
        case "completedWithErrors":
            result = COMPLETEDWITHERRORS_PRINTJOBSTATEDETAIL
        case "releaseWait":
            result = RELEASEWAIT_PRINTJOBSTATEDETAIL
        case "interpreting":
            result = INTERPRETING_PRINTJOBSTATEDETAIL
        case "unknownFutureValue":
            result = UNKNOWNFUTUREVALUE_PRINTJOBSTATEDETAIL
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializePrintJobStateDetail(values []PrintJobStateDetail) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i PrintJobStateDetail) isMultiValue() bool {
    return false
}
