// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models
type UserDefaultAuthenticationMethod int

const (
    PUSH_USERDEFAULTAUTHENTICATIONMETHOD UserDefaultAuthenticationMethod = iota
    OATH_USERDEFAULTAUTHENTICATIONMETHOD
    VOICEMOBILE_USERDEFAULTAUTHENTICATIONMETHOD
    VOICEALTERNATEMOBILE_USERDEFAULTAUTHENTICATIONMETHOD
    VOICEOFFICE_USERDEFAULTAUTHENTICATIONMETHOD
    SMS_USERDEFAULTAUTHENTICATIONMETHOD
    NONE_USERDEFAULTAUTHENTICATIONMETHOD
    UNKNOWNFUTUREVALUE_USERDEFAULTAUTHENTICATIONMETHOD
)

func (i UserDefaultAuthenticationMethod) String() string {
    return []string{"push", "oath", "voiceMobile", "voiceAlternateMobile", "voiceOffice", "sms", "none", "unknownFutureValue"}[i]
}
func ParseUserDefaultAuthenticationMethod(v string) (any, error) {
    result := PUSH_USERDEFAULTAUTHENTICATIONMETHOD
    switch v {
        case "push":
            result = PUSH_USERDEFAULTAUTHENTICATIONMETHOD
        case "oath":
            result = OATH_USERDEFAULTAUTHENTICATIONMETHOD
        case "voiceMobile":
            result = VOICEMOBILE_USERDEFAULTAUTHENTICATIONMETHOD
        case "voiceAlternateMobile":
            result = VOICEALTERNATEMOBILE_USERDEFAULTAUTHENTICATIONMETHOD
        case "voiceOffice":
            result = VOICEOFFICE_USERDEFAULTAUTHENTICATIONMETHOD
        case "sms":
            result = SMS_USERDEFAULTAUTHENTICATIONMETHOD
        case "none":
            result = NONE_USERDEFAULTAUTHENTICATIONMETHOD
        case "unknownFutureValue":
            result = UNKNOWNFUTUREVALUE_USERDEFAULTAUTHENTICATIONMETHOD
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializeUserDefaultAuthenticationMethod(values []UserDefaultAuthenticationMethod) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i UserDefaultAuthenticationMethod) isMultiValue() bool {
    return false
}
