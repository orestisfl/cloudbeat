// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models
type MessageActionFlag int

const (
    ANY_MESSAGEACTIONFLAG MessageActionFlag = iota
    CALL_MESSAGEACTIONFLAG
    DONOTFORWARD_MESSAGEACTIONFLAG
    FOLLOWUP_MESSAGEACTIONFLAG
    FYI_MESSAGEACTIONFLAG
    FORWARD_MESSAGEACTIONFLAG
    NORESPONSENECESSARY_MESSAGEACTIONFLAG
    READ_MESSAGEACTIONFLAG
    REPLY_MESSAGEACTIONFLAG
    REPLYTOALL_MESSAGEACTIONFLAG
    REVIEW_MESSAGEACTIONFLAG
)

func (i MessageActionFlag) String() string {
    return []string{"any", "call", "doNotForward", "followUp", "fyi", "forward", "noResponseNecessary", "read", "reply", "replyToAll", "review"}[i]
}
func ParseMessageActionFlag(v string) (any, error) {
    result := ANY_MESSAGEACTIONFLAG
    switch v {
        case "any":
            result = ANY_MESSAGEACTIONFLAG
        case "call":
            result = CALL_MESSAGEACTIONFLAG
        case "doNotForward":
            result = DONOTFORWARD_MESSAGEACTIONFLAG
        case "followUp":
            result = FOLLOWUP_MESSAGEACTIONFLAG
        case "fyi":
            result = FYI_MESSAGEACTIONFLAG
        case "forward":
            result = FORWARD_MESSAGEACTIONFLAG
        case "noResponseNecessary":
            result = NORESPONSENECESSARY_MESSAGEACTIONFLAG
        case "read":
            result = READ_MESSAGEACTIONFLAG
        case "reply":
            result = REPLY_MESSAGEACTIONFLAG
        case "replyToAll":
            result = REPLYTOALL_MESSAGEACTIONFLAG
        case "review":
            result = REVIEW_MESSAGEACTIONFLAG
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializeMessageActionFlag(values []MessageActionFlag) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i MessageActionFlag) isMultiValue() bool {
    return false
}
