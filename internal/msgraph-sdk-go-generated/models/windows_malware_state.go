// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models
// Malware current status
type WindowsMalwareState int

const (
    // Unknown
    UNKNOWN_WINDOWSMALWARESTATE WindowsMalwareState = iota
    // Detected
    DETECTED_WINDOWSMALWARESTATE
    // Cleaned
    CLEANED_WINDOWSMALWARESTATE
    // Quarantined
    QUARANTINED_WINDOWSMALWARESTATE
    // Removed
    REMOVED_WINDOWSMALWARESTATE
    // Allowed
    ALLOWED_WINDOWSMALWARESTATE
    // Blocked
    BLOCKED_WINDOWSMALWARESTATE
    // Clean failed
    CLEANFAILED_WINDOWSMALWARESTATE
    // Quarantine failed
    QUARANTINEFAILED_WINDOWSMALWARESTATE
    // Remove failed
    REMOVEFAILED_WINDOWSMALWARESTATE
    // Allow failed
    ALLOWFAILED_WINDOWSMALWARESTATE
    // Abandoned
    ABANDONED_WINDOWSMALWARESTATE
    // Block failed
    BLOCKFAILED_WINDOWSMALWARESTATE
)

func (i WindowsMalwareState) String() string {
    return []string{"unknown", "detected", "cleaned", "quarantined", "removed", "allowed", "blocked", "cleanFailed", "quarantineFailed", "removeFailed", "allowFailed", "abandoned", "blockFailed"}[i]
}
func ParseWindowsMalwareState(v string) (any, error) {
    result := UNKNOWN_WINDOWSMALWARESTATE
    switch v {
        case "unknown":
            result = UNKNOWN_WINDOWSMALWARESTATE
        case "detected":
            result = DETECTED_WINDOWSMALWARESTATE
        case "cleaned":
            result = CLEANED_WINDOWSMALWARESTATE
        case "quarantined":
            result = QUARANTINED_WINDOWSMALWARESTATE
        case "removed":
            result = REMOVED_WINDOWSMALWARESTATE
        case "allowed":
            result = ALLOWED_WINDOWSMALWARESTATE
        case "blocked":
            result = BLOCKED_WINDOWSMALWARESTATE
        case "cleanFailed":
            result = CLEANFAILED_WINDOWSMALWARESTATE
        case "quarantineFailed":
            result = QUARANTINEFAILED_WINDOWSMALWARESTATE
        case "removeFailed":
            result = REMOVEFAILED_WINDOWSMALWARESTATE
        case "allowFailed":
            result = ALLOWFAILED_WINDOWSMALWARESTATE
        case "abandoned":
            result = ABANDONED_WINDOWSMALWARESTATE
        case "blockFailed":
            result = BLOCKFAILED_WINDOWSMALWARESTATE
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializeWindowsMalwareState(values []WindowsMalwareState) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i WindowsMalwareState) isMultiValue() bool {
    return false
}
