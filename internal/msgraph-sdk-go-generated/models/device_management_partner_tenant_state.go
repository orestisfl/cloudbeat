// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models
// Partner state of this tenant.
type DeviceManagementPartnerTenantState int

const (
    // Partner state is unknown.
    UNKNOWN_DEVICEMANAGEMENTPARTNERTENANTSTATE DeviceManagementPartnerTenantState = iota
    // Partner is unavailable.
    UNAVAILABLE_DEVICEMANAGEMENTPARTNERTENANTSTATE
    // Partner is enabled.
    ENABLED_DEVICEMANAGEMENTPARTNERTENANTSTATE
    // Partner connection is terminated.
    TERMINATED_DEVICEMANAGEMENTPARTNERTENANTSTATE
    // Partner messages are rejected.
    REJECTED_DEVICEMANAGEMENTPARTNERTENANTSTATE
    // Partner is unresponsive.
    UNRESPONSIVE_DEVICEMANAGEMENTPARTNERTENANTSTATE
)

func (i DeviceManagementPartnerTenantState) String() string {
    return []string{"unknown", "unavailable", "enabled", "terminated", "rejected", "unresponsive"}[i]
}
func ParseDeviceManagementPartnerTenantState(v string) (any, error) {
    result := UNKNOWN_DEVICEMANAGEMENTPARTNERTENANTSTATE
    switch v {
        case "unknown":
            result = UNKNOWN_DEVICEMANAGEMENTPARTNERTENANTSTATE
        case "unavailable":
            result = UNAVAILABLE_DEVICEMANAGEMENTPARTNERTENANTSTATE
        case "enabled":
            result = ENABLED_DEVICEMANAGEMENTPARTNERTENANTSTATE
        case "terminated":
            result = TERMINATED_DEVICEMANAGEMENTPARTNERTENANTSTATE
        case "rejected":
            result = REJECTED_DEVICEMANAGEMENTPARTNERTENANTSTATE
        case "unresponsive":
            result = UNRESPONSIVE_DEVICEMANAGEMENTPARTNERTENANTSTATE
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializeDeviceManagementPartnerTenantState(values []DeviceManagementPartnerTenantState) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i DeviceManagementPartnerTenantState) isMultiValue() bool {
    return false
}
