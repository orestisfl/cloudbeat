// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models
// Possible values for automatic update mode.
type AutomaticUpdateMode int

const (
    // User Defined, default value, no intent.
    USERDEFINED_AUTOMATICUPDATEMODE AutomaticUpdateMode = iota
    // Notify on download.
    NOTIFYDOWNLOAD_AUTOMATICUPDATEMODE
    // Auto-install at maintenance time.
    AUTOINSTALLATMAINTENANCETIME_AUTOMATICUPDATEMODE
    // Auto-install and reboot at maintenance time.
    AUTOINSTALLANDREBOOTATMAINTENANCETIME_AUTOMATICUPDATEMODE
    // Auto-install and reboot at scheduled time.
    AUTOINSTALLANDREBOOTATSCHEDULEDTIME_AUTOMATICUPDATEMODE
    // Auto-install and restart without end-user control
    AUTOINSTALLANDREBOOTWITHOUTENDUSERCONTROL_AUTOMATICUPDATEMODE
)

func (i AutomaticUpdateMode) String() string {
    return []string{"userDefined", "notifyDownload", "autoInstallAtMaintenanceTime", "autoInstallAndRebootAtMaintenanceTime", "autoInstallAndRebootAtScheduledTime", "autoInstallAndRebootWithoutEndUserControl"}[i]
}
func ParseAutomaticUpdateMode(v string) (any, error) {
    result := USERDEFINED_AUTOMATICUPDATEMODE
    switch v {
        case "userDefined":
            result = USERDEFINED_AUTOMATICUPDATEMODE
        case "notifyDownload":
            result = NOTIFYDOWNLOAD_AUTOMATICUPDATEMODE
        case "autoInstallAtMaintenanceTime":
            result = AUTOINSTALLATMAINTENANCETIME_AUTOMATICUPDATEMODE
        case "autoInstallAndRebootAtMaintenanceTime":
            result = AUTOINSTALLANDREBOOTATMAINTENANCETIME_AUTOMATICUPDATEMODE
        case "autoInstallAndRebootAtScheduledTime":
            result = AUTOINSTALLANDREBOOTATSCHEDULEDTIME_AUTOMATICUPDATEMODE
        case "autoInstallAndRebootWithoutEndUserControl":
            result = AUTOINSTALLANDREBOOTWITHOUTENDUSERCONTROL_AUTOMATICUPDATEMODE
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializeAutomaticUpdateMode(values []AutomaticUpdateMode) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i AutomaticUpdateMode) isMultiValue() bool {
    return false
}
