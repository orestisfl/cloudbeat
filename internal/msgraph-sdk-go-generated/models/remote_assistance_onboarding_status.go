// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models
// The current TeamViewer connector status
type RemoteAssistanceOnboardingStatus int

const (
    // The status reported when there is no active TeamViewer connector configured or active
    NOTONBOARDED_REMOTEASSISTANCEONBOARDINGSTATUS RemoteAssistanceOnboardingStatus = iota
    // The status reported when the system has initiated a TeamViewer connection, but the service has not yet completed the confirmation of a connector
    ONBOARDING_REMOTEASSISTANCEONBOARDINGSTATUS
    // The status reported when the system has successfully exchanged account information with TeamViewer and can now initiate remote assistance sessions with clients
    ONBOARDED_REMOTEASSISTANCEONBOARDINGSTATUS
)

func (i RemoteAssistanceOnboardingStatus) String() string {
    return []string{"notOnboarded", "onboarding", "onboarded"}[i]
}
func ParseRemoteAssistanceOnboardingStatus(v string) (any, error) {
    result := NOTONBOARDED_REMOTEASSISTANCEONBOARDINGSTATUS
    switch v {
        case "notOnboarded":
            result = NOTONBOARDED_REMOTEASSISTANCEONBOARDINGSTATUS
        case "onboarding":
            result = ONBOARDING_REMOTEASSISTANCEONBOARDINGSTATUS
        case "onboarded":
            result = ONBOARDED_REMOTEASSISTANCEONBOARDINGSTATUS
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializeRemoteAssistanceOnboardingStatus(values []RemoteAssistanceOnboardingStatus) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i RemoteAssistanceOnboardingStatus) isMultiValue() bool {
    return false
}
