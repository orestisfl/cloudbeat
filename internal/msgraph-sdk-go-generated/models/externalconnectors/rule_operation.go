// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package externalconnectors
type RuleOperation int

const (
    NULL_RULEOPERATION RuleOperation = iota
    EQUALS_RULEOPERATION
    NOTEQUALS_RULEOPERATION
    CONTAINS_RULEOPERATION
    NOTCONTAINS_RULEOPERATION
    LESSTHAN_RULEOPERATION
    GREATERTHAN_RULEOPERATION
    STARTSWITH_RULEOPERATION
    UNKNOWNFUTUREVALUE_RULEOPERATION
)

func (i RuleOperation) String() string {
    return []string{"null", "equals", "notEquals", "contains", "notContains", "lessThan", "greaterThan", "startsWith", "unknownFutureValue"}[i]
}
func ParseRuleOperation(v string) (any, error) {
    result := NULL_RULEOPERATION
    switch v {
        case "null":
            result = NULL_RULEOPERATION
        case "equals":
            result = EQUALS_RULEOPERATION
        case "notEquals":
            result = NOTEQUALS_RULEOPERATION
        case "contains":
            result = CONTAINS_RULEOPERATION
        case "notContains":
            result = NOTCONTAINS_RULEOPERATION
        case "lessThan":
            result = LESSTHAN_RULEOPERATION
        case "greaterThan":
            result = GREATERTHAN_RULEOPERATION
        case "startsWith":
            result = STARTSWITH_RULEOPERATION
        case "unknownFutureValue":
            result = UNKNOWNFUTUREVALUE_RULEOPERATION
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializeRuleOperation(values []RuleOperation) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i RuleOperation) isMultiValue() bool {
    return false
}
