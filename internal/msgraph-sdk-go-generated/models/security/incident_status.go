// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package security
type IncidentStatus int

const (
    ACTIVE_INCIDENTSTATUS IncidentStatus = iota
    RESOLVED_INCIDENTSTATUS
    INPROGRESS_INCIDENTSTATUS
    REDIRECTED_INCIDENTSTATUS
    UNKNOWNFUTUREVALUE_INCIDENTSTATUS
    AWAITINGACTION_INCIDENTSTATUS
)

func (i IncidentStatus) String() string {
    return []string{"active", "resolved", "inProgress", "redirected", "unknownFutureValue", "awaitingAction"}[i]
}
func ParseIncidentStatus(v string) (any, error) {
    result := ACTIVE_INCIDENTSTATUS
    switch v {
        case "active":
            result = ACTIVE_INCIDENTSTATUS
        case "resolved":
            result = RESOLVED_INCIDENTSTATUS
        case "inProgress":
            result = INPROGRESS_INCIDENTSTATUS
        case "redirected":
            result = REDIRECTED_INCIDENTSTATUS
        case "unknownFutureValue":
            result = UNKNOWNFUTUREVALUE_INCIDENTSTATUS
        case "awaitingAction":
            result = AWAITINGACTION_INCIDENTSTATUS
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializeIncidentStatus(values []IncidentStatus) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i IncidentStatus) isMultiValue() bool {
    return false
}
