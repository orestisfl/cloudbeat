// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package security
type AlertStatus int

const (
    UNKNOWN_ALERTSTATUS AlertStatus = iota
    NEW_ALERTSTATUS
    INPROGRESS_ALERTSTATUS
    RESOLVED_ALERTSTATUS
    UNKNOWNFUTUREVALUE_ALERTSTATUS
)

func (i AlertStatus) String() string {
    return []string{"unknown", "new", "inProgress", "resolved", "unknownFutureValue"}[i]
}
func ParseAlertStatus(v string) (any, error) {
    result := UNKNOWN_ALERTSTATUS
    switch v {
        case "unknown":
            result = UNKNOWN_ALERTSTATUS
        case "new":
            result = NEW_ALERTSTATUS
        case "inProgress":
            result = INPROGRESS_ALERTSTATUS
        case "resolved":
            result = RESOLVED_ALERTSTATUS
        case "unknownFutureValue":
            result = UNKNOWNFUTUREVALUE_ALERTSTATUS
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializeAlertStatus(values []AlertStatus) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i AlertStatus) isMultiValue() bool {
    return false
}
