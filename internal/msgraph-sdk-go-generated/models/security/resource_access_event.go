// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package security

import (
    i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e "time"
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

type ResourceAccessEvent struct {
    // The time of the access event.
    accessDateTime *i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time
    // The identifier of the user account.
    accountId *string
    // Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
    additionalData map[string]any
    // IP address of the resource.
    ipAddress *string
    // The OdataType property
    odataType *string
    // The protocol and host name pairs describing the connection.
    resourceIdentifier *string
}
// NewResourceAccessEvent instantiates a new ResourceAccessEvent and sets the default values.
func NewResourceAccessEvent()(*ResourceAccessEvent) {
    m := &ResourceAccessEvent{
    }
    m.SetAdditionalData(make(map[string]any))
    return m
}
// CreateResourceAccessEventFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateResourceAccessEventFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewResourceAccessEvent(), nil
}
// GetAccessDateTime gets the accessDateTime property value. The time of the access event.
// returns a *Time when successful
func (m *ResourceAccessEvent) GetAccessDateTime()(*i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time) {
    return m.accessDateTime
}
// GetAccountId gets the accountId property value. The identifier of the user account.
// returns a *string when successful
func (m *ResourceAccessEvent) GetAccountId()(*string) {
    return m.accountId
}
// GetAdditionalData gets the AdditionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
// returns a map[string]any when successful
func (m *ResourceAccessEvent) GetAdditionalData()(map[string]any) {
    return m.additionalData
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *ResourceAccessEvent) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := make(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error))
    res["accessDateTime"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetTimeValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetAccessDateTime(val)
        }
        return nil
    }
    res["accountId"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetAccountId(val)
        }
        return nil
    }
    res["ipAddress"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetIpAddress(val)
        }
        return nil
    }
    res["@odata.type"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetOdataType(val)
        }
        return nil
    }
    res["resourceIdentifier"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetResourceIdentifier(val)
        }
        return nil
    }
    return res
}
// GetIpAddress gets the ipAddress property value. IP address of the resource.
// returns a *string when successful
func (m *ResourceAccessEvent) GetIpAddress()(*string) {
    return m.ipAddress
}
// GetOdataType gets the @odata.type property value. The OdataType property
// returns a *string when successful
func (m *ResourceAccessEvent) GetOdataType()(*string) {
    return m.odataType
}
// GetResourceIdentifier gets the resourceIdentifier property value. The protocol and host name pairs describing the connection.
// returns a *string when successful
func (m *ResourceAccessEvent) GetResourceIdentifier()(*string) {
    return m.resourceIdentifier
}
// Serialize serializes information the current object
func (m *ResourceAccessEvent) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    {
        err := writer.WriteTimeValue("accessDateTime", m.GetAccessDateTime())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("accountId", m.GetAccountId())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("ipAddress", m.GetIpAddress())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("@odata.type", m.GetOdataType())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("resourceIdentifier", m.GetResourceIdentifier())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteAdditionalData(m.GetAdditionalData())
        if err != nil {
            return err
        }
    }
    return nil
}
// SetAccessDateTime sets the accessDateTime property value. The time of the access event.
func (m *ResourceAccessEvent) SetAccessDateTime(value *i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)() {
    m.accessDateTime = value
}
// SetAccountId sets the accountId property value. The identifier of the user account.
func (m *ResourceAccessEvent) SetAccountId(value *string)() {
    m.accountId = value
}
// SetAdditionalData sets the AdditionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
func (m *ResourceAccessEvent) SetAdditionalData(value map[string]any)() {
    m.additionalData = value
}
// SetIpAddress sets the ipAddress property value. IP address of the resource.
func (m *ResourceAccessEvent) SetIpAddress(value *string)() {
    m.ipAddress = value
}
// SetOdataType sets the @odata.type property value. The OdataType property
func (m *ResourceAccessEvent) SetOdataType(value *string)() {
    m.odataType = value
}
// SetResourceIdentifier sets the resourceIdentifier property value. The protocol and host name pairs describing the connection.
func (m *ResourceAccessEvent) SetResourceIdentifier(value *string)() {
    m.resourceIdentifier = value
}
type ResourceAccessEventable interface {
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.AdditionalDataHolder
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    GetAccessDateTime()(*i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)
    GetAccountId()(*string)
    GetIpAddress()(*string)
    GetOdataType()(*string)
    GetResourceIdentifier()(*string)
    SetAccessDateTime(value *i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)()
    SetAccountId(value *string)()
    SetIpAddress(value *string)()
    SetOdataType(value *string)()
    SetResourceIdentifier(value *string)()
}
