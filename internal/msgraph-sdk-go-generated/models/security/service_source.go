// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package security
type ServiceSource int

const (
    UNKNOWN_SERVICESOURCE ServiceSource = iota
    MICROSOFTDEFENDERFORENDPOINT_SERVICESOURCE
    MICROSOFTDEFENDERFORIDENTITY_SERVICESOURCE
    MICROSOFTDEFENDERFORCLOUDAPPS_SERVICESOURCE
    MICROSOFTDEFENDERFOROFFICE365_SERVICESOURCE
    MICROSOFT365DEFENDER_SERVICESOURCE
    AZUREADIDENTITYPROTECTION_SERVICESOURCE
    MICROSOFTAPPGOVERNANCE_SERVICESOURCE
    DATALOSSPREVENTION_SERVICESOURCE
    UNKNOWNFUTUREVALUE_SERVICESOURCE
    MICROSOFTDEFENDERFORCLOUD_SERVICESOURCE
    MICROSOFTSENTINEL_SERVICESOURCE
    MICROSOFTINSIDERRISKMANAGEMENT_SERVICESOURCE
    MICROSOFTTHREATINTELLIGENCE_SERVICESOURCE
)

func (i ServiceSource) String() string {
    return []string{"unknown", "microsoftDefenderForEndpoint", "microsoftDefenderForIdentity", "microsoftDefenderForCloudApps", "microsoftDefenderForOffice365", "microsoft365Defender", "azureAdIdentityProtection", "microsoftAppGovernance", "dataLossPrevention", "unknownFutureValue", "microsoftDefenderForCloud", "microsoftSentinel", "microsoftInsiderRiskManagement", "microsoftThreatIntelligence"}[i]
}
func ParseServiceSource(v string) (any, error) {
    result := UNKNOWN_SERVICESOURCE
    switch v {
        case "unknown":
            result = UNKNOWN_SERVICESOURCE
        case "microsoftDefenderForEndpoint":
            result = MICROSOFTDEFENDERFORENDPOINT_SERVICESOURCE
        case "microsoftDefenderForIdentity":
            result = MICROSOFTDEFENDERFORIDENTITY_SERVICESOURCE
        case "microsoftDefenderForCloudApps":
            result = MICROSOFTDEFENDERFORCLOUDAPPS_SERVICESOURCE
        case "microsoftDefenderForOffice365":
            result = MICROSOFTDEFENDERFOROFFICE365_SERVICESOURCE
        case "microsoft365Defender":
            result = MICROSOFT365DEFENDER_SERVICESOURCE
        case "azureAdIdentityProtection":
            result = AZUREADIDENTITYPROTECTION_SERVICESOURCE
        case "microsoftAppGovernance":
            result = MICROSOFTAPPGOVERNANCE_SERVICESOURCE
        case "dataLossPrevention":
            result = DATALOSSPREVENTION_SERVICESOURCE
        case "unknownFutureValue":
            result = UNKNOWNFUTUREVALUE_SERVICESOURCE
        case "microsoftDefenderForCloud":
            result = MICROSOFTDEFENDERFORCLOUD_SERVICESOURCE
        case "microsoftSentinel":
            result = MICROSOFTSENTINEL_SERVICESOURCE
        case "microsoftInsiderRiskManagement":
            result = MICROSOFTINSIDERRISKMANAGEMENT_SERVICESOURCE
        case "microsoftThreatIntelligence":
            result = MICROSOFTTHREATINTELLIGENCE_SERVICESOURCE
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializeServiceSource(values []ServiceSource) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i ServiceSource) isMultiValue() bool {
    return false
}
