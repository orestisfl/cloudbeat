// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models
type CoachmarkLocationType int

const (
    UNKNOWN_COACHMARKLOCATIONTYPE CoachmarkLocationType = iota
    FROMEMAIL_COACHMARKLOCATIONTYPE
    SUBJECT_COACHMARKLOCATIONTYPE
    EXTERNALTAG_COACHMARKLOCATIONTYPE
    DISPLAYNAME_COACHMARKLOCATIONTYPE
    MESSAGEBODY_COACHMARKLOCATIONTYPE
    UNKNOWNFUTUREVALUE_COACHMARKLOCATIONTYPE
)

func (i CoachmarkLocationType) String() string {
    return []string{"unknown", "fromEmail", "subject", "externalTag", "displayName", "messageBody", "unknownFutureValue"}[i]
}
func ParseCoachmarkLocationType(v string) (any, error) {
    result := UNKNOWN_COACHMARKLOCATIONTYPE
    switch v {
        case "unknown":
            result = UNKNOWN_COACHMARKLOCATIONTYPE
        case "fromEmail":
            result = FROMEMAIL_COACHMARKLOCATIONTYPE
        case "subject":
            result = SUBJECT_COACHMARKLOCATIONTYPE
        case "externalTag":
            result = EXTERNALTAG_COACHMARKLOCATIONTYPE
        case "displayName":
            result = DISPLAYNAME_COACHMARKLOCATIONTYPE
        case "messageBody":
            result = MESSAGEBODY_COACHMARKLOCATIONTYPE
        case "unknownFutureValue":
            result = UNKNOWNFUTUREVALUE_COACHMARKLOCATIONTYPE
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializeCoachmarkLocationType(values []CoachmarkLocationType) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i CoachmarkLocationType) isMultiValue() bool {
    return false
}
