// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models
type UserFlowType int

const (
    SIGNUP_USERFLOWTYPE UserFlowType = iota
    SIGNIN_USERFLOWTYPE
    SIGNUPORSIGNIN_USERFLOWTYPE
    PASSWORDRESET_USERFLOWTYPE
    PROFILEUPDATE_USERFLOWTYPE
    RESOURCEOWNER_USERFLOWTYPE
    UNKNOWNFUTUREVALUE_USERFLOWTYPE
)

func (i UserFlowType) String() string {
    return []string{"signUp", "signIn", "signUpOrSignIn", "passwordReset", "profileUpdate", "resourceOwner", "unknownFutureValue"}[i]
}
func ParseUserFlowType(v string) (any, error) {
    result := SIGNUP_USERFLOWTYPE
    switch v {
        case "signUp":
            result = SIGNUP_USERFLOWTYPE
        case "signIn":
            result = SIGNIN_USERFLOWTYPE
        case "signUpOrSignIn":
            result = SIGNUPORSIGNIN_USERFLOWTYPE
        case "passwordReset":
            result = PASSWORDRESET_USERFLOWTYPE
        case "profileUpdate":
            result = PROFILEUPDATE_USERFLOWTYPE
        case "resourceOwner":
            result = RESOURCEOWNER_USERFLOWTYPE
        case "unknownFutureValue":
            result = UNKNOWNFUTUREVALUE_USERFLOWTYPE
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializeUserFlowType(values []UserFlowType) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i UserFlowType) isMultiValue() bool {
    return false
}
