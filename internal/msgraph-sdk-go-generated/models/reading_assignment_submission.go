// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models

import (
    i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e "time"
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

type ReadingAssignmentSubmission struct {
    Entity
    // Accuracy score of the reading progress.
    accuracyScore *float64
    // Indicates whether the submission is an attempt by the student or a miscue edit done by the educator. The possible values are Attempt and EditMiscue.
    action *string
    // ID of the assignment with which this submission is associated.
    assignmentId *string
    // List of words that the student found challenging during the reading session.
    challengingWords []ChallengingWordable
    // ID of the class this reading progress is associated with.
    classId *string
    // Insertions of the reading progress.
    insertions *int64
    // Mispronunciations of the reading progress.
    mispronunciations *int64
    // Number of exclamation marks missed in the reading passage.
    missedExclamationMarks *int64
    // Number of periods missed in the reading passage.
    missedPeriods *int64
    // Number of question marks missed in the reading passage.
    missedQuestionMarks *int64
    // Number of short words missed during the reading session.
    missedShorts *int64
    // Score that reflects the student's use of intonation and expression. Lower scores indicate more monotone reading.
    monotoneScore *float64
    // Omissions of the reading progress.
    omissions *int64
    // Number of times the student repeated words or phrases during the reading session.
    repetitions *int64
    // Number of times the student self-corrected their reading errors.
    selfCorrections *int64
    // ID of the user this reading progress is associated with.
    studentId *string
    // Date and time of the submission this reading progress is associated with. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    submissionDateTime *i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time
    // ID of the submission this reading progress is associated with.
    submissionId *string
    // Number of unexpected pauses made during the reading session.
    unexpectedPauses *int64
    // Words count of the reading progress.
    wordCount *int64
    // Words per minute of the reading progress.
    wordsPerMinute *float64
}
// NewReadingAssignmentSubmission instantiates a new ReadingAssignmentSubmission and sets the default values.
func NewReadingAssignmentSubmission()(*ReadingAssignmentSubmission) {
    m := &ReadingAssignmentSubmission{
        Entity: *NewEntity(),
    }
    return m
}
// CreateReadingAssignmentSubmissionFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateReadingAssignmentSubmissionFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewReadingAssignmentSubmission(), nil
}
// GetAccuracyScore gets the accuracyScore property value. Accuracy score of the reading progress.
// returns a *float64 when successful
func (m *ReadingAssignmentSubmission) GetAccuracyScore()(*float64) {
    return m.accuracyScore
}
// GetAction gets the action property value. Indicates whether the submission is an attempt by the student or a miscue edit done by the educator. The possible values are Attempt and EditMiscue.
// returns a *string when successful
func (m *ReadingAssignmentSubmission) GetAction()(*string) {
    return m.action
}
// GetAssignmentId gets the assignmentId property value. ID of the assignment with which this submission is associated.
// returns a *string when successful
func (m *ReadingAssignmentSubmission) GetAssignmentId()(*string) {
    return m.assignmentId
}
// GetChallengingWords gets the challengingWords property value. List of words that the student found challenging during the reading session.
// returns a []ChallengingWordable when successful
func (m *ReadingAssignmentSubmission) GetChallengingWords()([]ChallengingWordable) {
    return m.challengingWords
}
// GetClassId gets the classId property value. ID of the class this reading progress is associated with.
// returns a *string when successful
func (m *ReadingAssignmentSubmission) GetClassId()(*string) {
    return m.classId
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *ReadingAssignmentSubmission) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := m.Entity.GetFieldDeserializers()
    res["accuracyScore"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetFloat64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetAccuracyScore(val)
        }
        return nil
    }
    res["action"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetAction(val)
        }
        return nil
    }
    res["assignmentId"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetAssignmentId(val)
        }
        return nil
    }
    res["challengingWords"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetCollectionOfObjectValues(CreateChallengingWordFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            res := make([]ChallengingWordable, len(val))
            for i, v := range val {
                if v != nil {
                    res[i] = v.(ChallengingWordable)
                }
            }
            m.SetChallengingWords(res)
        }
        return nil
    }
    res["classId"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetClassId(val)
        }
        return nil
    }
    res["insertions"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetInt64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetInsertions(val)
        }
        return nil
    }
    res["mispronunciations"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetInt64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetMispronunciations(val)
        }
        return nil
    }
    res["missedExclamationMarks"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetInt64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetMissedExclamationMarks(val)
        }
        return nil
    }
    res["missedPeriods"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetInt64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetMissedPeriods(val)
        }
        return nil
    }
    res["missedQuestionMarks"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetInt64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetMissedQuestionMarks(val)
        }
        return nil
    }
    res["missedShorts"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetInt64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetMissedShorts(val)
        }
        return nil
    }
    res["monotoneScore"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetFloat64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetMonotoneScore(val)
        }
        return nil
    }
    res["omissions"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetInt64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetOmissions(val)
        }
        return nil
    }
    res["repetitions"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetInt64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetRepetitions(val)
        }
        return nil
    }
    res["selfCorrections"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetInt64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetSelfCorrections(val)
        }
        return nil
    }
    res["studentId"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetStudentId(val)
        }
        return nil
    }
    res["submissionDateTime"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetTimeValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetSubmissionDateTime(val)
        }
        return nil
    }
    res["submissionId"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetSubmissionId(val)
        }
        return nil
    }
    res["unexpectedPauses"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetInt64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetUnexpectedPauses(val)
        }
        return nil
    }
    res["wordCount"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetInt64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetWordCount(val)
        }
        return nil
    }
    res["wordsPerMinute"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetFloat64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetWordsPerMinute(val)
        }
        return nil
    }
    return res
}
// GetInsertions gets the insertions property value. Insertions of the reading progress.
// returns a *int64 when successful
func (m *ReadingAssignmentSubmission) GetInsertions()(*int64) {
    return m.insertions
}
// GetMispronunciations gets the mispronunciations property value. Mispronunciations of the reading progress.
// returns a *int64 when successful
func (m *ReadingAssignmentSubmission) GetMispronunciations()(*int64) {
    return m.mispronunciations
}
// GetMissedExclamationMarks gets the missedExclamationMarks property value. Number of exclamation marks missed in the reading passage.
// returns a *int64 when successful
func (m *ReadingAssignmentSubmission) GetMissedExclamationMarks()(*int64) {
    return m.missedExclamationMarks
}
// GetMissedPeriods gets the missedPeriods property value. Number of periods missed in the reading passage.
// returns a *int64 when successful
func (m *ReadingAssignmentSubmission) GetMissedPeriods()(*int64) {
    return m.missedPeriods
}
// GetMissedQuestionMarks gets the missedQuestionMarks property value. Number of question marks missed in the reading passage.
// returns a *int64 when successful
func (m *ReadingAssignmentSubmission) GetMissedQuestionMarks()(*int64) {
    return m.missedQuestionMarks
}
// GetMissedShorts gets the missedShorts property value. Number of short words missed during the reading session.
// returns a *int64 when successful
func (m *ReadingAssignmentSubmission) GetMissedShorts()(*int64) {
    return m.missedShorts
}
// GetMonotoneScore gets the monotoneScore property value. Score that reflects the student's use of intonation and expression. Lower scores indicate more monotone reading.
// returns a *float64 when successful
func (m *ReadingAssignmentSubmission) GetMonotoneScore()(*float64) {
    return m.monotoneScore
}
// GetOmissions gets the omissions property value. Omissions of the reading progress.
// returns a *int64 when successful
func (m *ReadingAssignmentSubmission) GetOmissions()(*int64) {
    return m.omissions
}
// GetRepetitions gets the repetitions property value. Number of times the student repeated words or phrases during the reading session.
// returns a *int64 when successful
func (m *ReadingAssignmentSubmission) GetRepetitions()(*int64) {
    return m.repetitions
}
// GetSelfCorrections gets the selfCorrections property value. Number of times the student self-corrected their reading errors.
// returns a *int64 when successful
func (m *ReadingAssignmentSubmission) GetSelfCorrections()(*int64) {
    return m.selfCorrections
}
// GetStudentId gets the studentId property value. ID of the user this reading progress is associated with.
// returns a *string when successful
func (m *ReadingAssignmentSubmission) GetStudentId()(*string) {
    return m.studentId
}
// GetSubmissionDateTime gets the submissionDateTime property value. Date and time of the submission this reading progress is associated with. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
// returns a *Time when successful
func (m *ReadingAssignmentSubmission) GetSubmissionDateTime()(*i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time) {
    return m.submissionDateTime
}
// GetSubmissionId gets the submissionId property value. ID of the submission this reading progress is associated with.
// returns a *string when successful
func (m *ReadingAssignmentSubmission) GetSubmissionId()(*string) {
    return m.submissionId
}
// GetUnexpectedPauses gets the unexpectedPauses property value. Number of unexpected pauses made during the reading session.
// returns a *int64 when successful
func (m *ReadingAssignmentSubmission) GetUnexpectedPauses()(*int64) {
    return m.unexpectedPauses
}
// GetWordCount gets the wordCount property value. Words count of the reading progress.
// returns a *int64 when successful
func (m *ReadingAssignmentSubmission) GetWordCount()(*int64) {
    return m.wordCount
}
// GetWordsPerMinute gets the wordsPerMinute property value. Words per minute of the reading progress.
// returns a *float64 when successful
func (m *ReadingAssignmentSubmission) GetWordsPerMinute()(*float64) {
    return m.wordsPerMinute
}
// Serialize serializes information the current object
func (m *ReadingAssignmentSubmission) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    err := m.Entity.Serialize(writer)
    if err != nil {
        return err
    }
    {
        err = writer.WriteFloat64Value("accuracyScore", m.GetAccuracyScore())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("action", m.GetAction())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("assignmentId", m.GetAssignmentId())
        if err != nil {
            return err
        }
    }
    if m.GetChallengingWords() != nil {
        cast := make([]i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, len(m.GetChallengingWords()))
        for i, v := range m.GetChallengingWords() {
            if v != nil {
                cast[i] = v.(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable)
            }
        }
        err = writer.WriteCollectionOfObjectValues("challengingWords", cast)
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("classId", m.GetClassId())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteInt64Value("insertions", m.GetInsertions())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteInt64Value("mispronunciations", m.GetMispronunciations())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteInt64Value("missedExclamationMarks", m.GetMissedExclamationMarks())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteInt64Value("missedPeriods", m.GetMissedPeriods())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteInt64Value("missedQuestionMarks", m.GetMissedQuestionMarks())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteInt64Value("missedShorts", m.GetMissedShorts())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteFloat64Value("monotoneScore", m.GetMonotoneScore())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteInt64Value("omissions", m.GetOmissions())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteInt64Value("repetitions", m.GetRepetitions())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteInt64Value("selfCorrections", m.GetSelfCorrections())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("studentId", m.GetStudentId())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteTimeValue("submissionDateTime", m.GetSubmissionDateTime())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("submissionId", m.GetSubmissionId())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteInt64Value("unexpectedPauses", m.GetUnexpectedPauses())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteInt64Value("wordCount", m.GetWordCount())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteFloat64Value("wordsPerMinute", m.GetWordsPerMinute())
        if err != nil {
            return err
        }
    }
    return nil
}
// SetAccuracyScore sets the accuracyScore property value. Accuracy score of the reading progress.
func (m *ReadingAssignmentSubmission) SetAccuracyScore(value *float64)() {
    m.accuracyScore = value
}
// SetAction sets the action property value. Indicates whether the submission is an attempt by the student or a miscue edit done by the educator. The possible values are Attempt and EditMiscue.
func (m *ReadingAssignmentSubmission) SetAction(value *string)() {
    m.action = value
}
// SetAssignmentId sets the assignmentId property value. ID of the assignment with which this submission is associated.
func (m *ReadingAssignmentSubmission) SetAssignmentId(value *string)() {
    m.assignmentId = value
}
// SetChallengingWords sets the challengingWords property value. List of words that the student found challenging during the reading session.
func (m *ReadingAssignmentSubmission) SetChallengingWords(value []ChallengingWordable)() {
    m.challengingWords = value
}
// SetClassId sets the classId property value. ID of the class this reading progress is associated with.
func (m *ReadingAssignmentSubmission) SetClassId(value *string)() {
    m.classId = value
}
// SetInsertions sets the insertions property value. Insertions of the reading progress.
func (m *ReadingAssignmentSubmission) SetInsertions(value *int64)() {
    m.insertions = value
}
// SetMispronunciations sets the mispronunciations property value. Mispronunciations of the reading progress.
func (m *ReadingAssignmentSubmission) SetMispronunciations(value *int64)() {
    m.mispronunciations = value
}
// SetMissedExclamationMarks sets the missedExclamationMarks property value. Number of exclamation marks missed in the reading passage.
func (m *ReadingAssignmentSubmission) SetMissedExclamationMarks(value *int64)() {
    m.missedExclamationMarks = value
}
// SetMissedPeriods sets the missedPeriods property value. Number of periods missed in the reading passage.
func (m *ReadingAssignmentSubmission) SetMissedPeriods(value *int64)() {
    m.missedPeriods = value
}
// SetMissedQuestionMarks sets the missedQuestionMarks property value. Number of question marks missed in the reading passage.
func (m *ReadingAssignmentSubmission) SetMissedQuestionMarks(value *int64)() {
    m.missedQuestionMarks = value
}
// SetMissedShorts sets the missedShorts property value. Number of short words missed during the reading session.
func (m *ReadingAssignmentSubmission) SetMissedShorts(value *int64)() {
    m.missedShorts = value
}
// SetMonotoneScore sets the monotoneScore property value. Score that reflects the student's use of intonation and expression. Lower scores indicate more monotone reading.
func (m *ReadingAssignmentSubmission) SetMonotoneScore(value *float64)() {
    m.monotoneScore = value
}
// SetOmissions sets the omissions property value. Omissions of the reading progress.
func (m *ReadingAssignmentSubmission) SetOmissions(value *int64)() {
    m.omissions = value
}
// SetRepetitions sets the repetitions property value. Number of times the student repeated words or phrases during the reading session.
func (m *ReadingAssignmentSubmission) SetRepetitions(value *int64)() {
    m.repetitions = value
}
// SetSelfCorrections sets the selfCorrections property value. Number of times the student self-corrected their reading errors.
func (m *ReadingAssignmentSubmission) SetSelfCorrections(value *int64)() {
    m.selfCorrections = value
}
// SetStudentId sets the studentId property value. ID of the user this reading progress is associated with.
func (m *ReadingAssignmentSubmission) SetStudentId(value *string)() {
    m.studentId = value
}
// SetSubmissionDateTime sets the submissionDateTime property value. Date and time of the submission this reading progress is associated with. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
func (m *ReadingAssignmentSubmission) SetSubmissionDateTime(value *i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)() {
    m.submissionDateTime = value
}
// SetSubmissionId sets the submissionId property value. ID of the submission this reading progress is associated with.
func (m *ReadingAssignmentSubmission) SetSubmissionId(value *string)() {
    m.submissionId = value
}
// SetUnexpectedPauses sets the unexpectedPauses property value. Number of unexpected pauses made during the reading session.
func (m *ReadingAssignmentSubmission) SetUnexpectedPauses(value *int64)() {
    m.unexpectedPauses = value
}
// SetWordCount sets the wordCount property value. Words count of the reading progress.
func (m *ReadingAssignmentSubmission) SetWordCount(value *int64)() {
    m.wordCount = value
}
// SetWordsPerMinute sets the wordsPerMinute property value. Words per minute of the reading progress.
func (m *ReadingAssignmentSubmission) SetWordsPerMinute(value *float64)() {
    m.wordsPerMinute = value
}
type ReadingAssignmentSubmissionable interface {
    Entityable
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    GetAccuracyScore()(*float64)
    GetAction()(*string)
    GetAssignmentId()(*string)
    GetChallengingWords()([]ChallengingWordable)
    GetClassId()(*string)
    GetInsertions()(*int64)
    GetMispronunciations()(*int64)
    GetMissedExclamationMarks()(*int64)
    GetMissedPeriods()(*int64)
    GetMissedQuestionMarks()(*int64)
    GetMissedShorts()(*int64)
    GetMonotoneScore()(*float64)
    GetOmissions()(*int64)
    GetRepetitions()(*int64)
    GetSelfCorrections()(*int64)
    GetStudentId()(*string)
    GetSubmissionDateTime()(*i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)
    GetSubmissionId()(*string)
    GetUnexpectedPauses()(*int64)
    GetWordCount()(*int64)
    GetWordsPerMinute()(*float64)
    SetAccuracyScore(value *float64)()
    SetAction(value *string)()
    SetAssignmentId(value *string)()
    SetChallengingWords(value []ChallengingWordable)()
    SetClassId(value *string)()
    SetInsertions(value *int64)()
    SetMispronunciations(value *int64)()
    SetMissedExclamationMarks(value *int64)()
    SetMissedPeriods(value *int64)()
    SetMissedQuestionMarks(value *int64)()
    SetMissedShorts(value *int64)()
    SetMonotoneScore(value *float64)()
    SetOmissions(value *int64)()
    SetRepetitions(value *int64)()
    SetSelfCorrections(value *int64)()
    SetStudentId(value *string)()
    SetSubmissionDateTime(value *i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)()
    SetSubmissionId(value *string)()
    SetUnexpectedPauses(value *int64)()
    SetWordCount(value *int64)()
    SetWordsPerMinute(value *float64)()
}
