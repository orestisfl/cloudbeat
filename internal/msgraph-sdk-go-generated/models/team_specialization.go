// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models
type TeamSpecialization int

const (
    NONE_TEAMSPECIALIZATION TeamSpecialization = iota
    EDUCATIONSTANDARD_TEAMSPECIALIZATION
    EDUCATIONCLASS_TEAMSPECIALIZATION
    EDUCATIONPROFESSIONALLEARNINGCOMMUNITY_TEAMSPECIALIZATION
    EDUCATIONSTAFF_TEAMSPECIALIZATION
    HEALTHCARESTANDARD_TEAMSPECIALIZATION
    HEALTHCARECARECOORDINATION_TEAMSPECIALIZATION
    UNKNOWNFUTUREVALUE_TEAMSPECIALIZATION
)

func (i TeamSpecialization) String() string {
    return []string{"none", "educationStandard", "educationClass", "educationProfessionalLearningCommunity", "educationStaff", "healthcareStandard", "healthcareCareCoordination", "unknownFutureValue"}[i]
}
func ParseTeamSpecialization(v string) (any, error) {
    result := NONE_TEAMSPECIALIZATION
    switch v {
        case "none":
            result = NONE_TEAMSPECIALIZATION
        case "educationStandard":
            result = EDUCATIONSTANDARD_TEAMSPECIALIZATION
        case "educationClass":
            result = EDUCATIONCLASS_TEAMSPECIALIZATION
        case "educationProfessionalLearningCommunity":
            result = EDUCATIONPROFESSIONALLEARNINGCOMMUNITY_TEAMSPECIALIZATION
        case "educationStaff":
            result = EDUCATIONSTAFF_TEAMSPECIALIZATION
        case "healthcareStandard":
            result = HEALTHCARESTANDARD_TEAMSPECIALIZATION
        case "healthcareCareCoordination":
            result = HEALTHCARECARECOORDINATION_TEAMSPECIALIZATION
        case "unknownFutureValue":
            result = UNKNOWNFUTUREVALUE_TEAMSPECIALIZATION
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializeTeamSpecialization(values []TeamSpecialization) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i TeamSpecialization) isMultiValue() bool {
    return false
}
