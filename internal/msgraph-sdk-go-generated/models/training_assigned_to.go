// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models
type TrainingAssignedTo int

const (
    NONE_TRAININGASSIGNEDTO TrainingAssignedTo = iota
    ALLUSERS_TRAININGASSIGNEDTO
    CLICKEDPAYLOAD_TRAININGASSIGNEDTO
    COMPROMISED_TRAININGASSIGNEDTO
    REPORTEDPHISH_TRAININGASSIGNEDTO
    READBUTNOTCLICKED_TRAININGASSIGNEDTO
    DIDNOTHING_TRAININGASSIGNEDTO
    UNKNOWNFUTUREVALUE_TRAININGASSIGNEDTO
)

func (i TrainingAssignedTo) String() string {
    return []string{"none", "allUsers", "clickedPayload", "compromised", "reportedPhish", "readButNotClicked", "didNothing", "unknownFutureValue"}[i]
}
func ParseTrainingAssignedTo(v string) (any, error) {
    result := NONE_TRAININGASSIGNEDTO
    switch v {
        case "none":
            result = NONE_TRAININGASSIGNEDTO
        case "allUsers":
            result = ALLUSERS_TRAININGASSIGNEDTO
        case "clickedPayload":
            result = CLICKEDPAYLOAD_TRAININGASSIGNEDTO
        case "compromised":
            result = COMPROMISED_TRAININGASSIGNEDTO
        case "reportedPhish":
            result = REPORTEDPHISH_TRAININGASSIGNEDTO
        case "readButNotClicked":
            result = READBUTNOTCLICKED_TRAININGASSIGNEDTO
        case "didNothing":
            result = DIDNOTHING_TRAININGASSIGNEDTO
        case "unknownFutureValue":
            result = UNKNOWNFUTUREVALUE_TRAININGASSIGNEDTO
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializeTrainingAssignedTo(values []TrainingAssignedTo) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i TrainingAssignedTo) isMultiValue() bool {
    return false
}
