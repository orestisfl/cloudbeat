// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models
type DataSubjectType int

const (
    CUSTOMER_DATASUBJECTTYPE DataSubjectType = iota
    CURRENTEMPLOYEE_DATASUBJECTTYPE
    FORMEREMPLOYEE_DATASUBJECTTYPE
    PROSPECTIVEEMPLOYEE_DATASUBJECTTYPE
    STUDENT_DATASUBJECTTYPE
    TEACHER_DATASUBJECTTYPE
    FACULTY_DATASUBJECTTYPE
    OTHER_DATASUBJECTTYPE
    UNKNOWNFUTUREVALUE_DATASUBJECTTYPE
)

func (i DataSubjectType) String() string {
    return []string{"customer", "currentEmployee", "formerEmployee", "prospectiveEmployee", "student", "teacher", "faculty", "other", "unknownFutureValue"}[i]
}
func ParseDataSubjectType(v string) (any, error) {
    result := CUSTOMER_DATASUBJECTTYPE
    switch v {
        case "customer":
            result = CUSTOMER_DATASUBJECTTYPE
        case "currentEmployee":
            result = CURRENTEMPLOYEE_DATASUBJECTTYPE
        case "formerEmployee":
            result = FORMEREMPLOYEE_DATASUBJECTTYPE
        case "prospectiveEmployee":
            result = PROSPECTIVEEMPLOYEE_DATASUBJECTTYPE
        case "student":
            result = STUDENT_DATASUBJECTTYPE
        case "teacher":
            result = TEACHER_DATASUBJECTTYPE
        case "faculty":
            result = FACULTY_DATASUBJECTTYPE
        case "other":
            result = OTHER_DATASUBJECTTYPE
        case "unknownFutureValue":
            result = UNKNOWNFUTUREVALUE_DATASUBJECTTYPE
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializeDataSubjectType(values []DataSubjectType) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i DataSubjectType) isMultiValue() bool {
    return false
}
