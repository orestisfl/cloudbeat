// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models

import (
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

type VulnerabilityState struct {
    // Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
    additionalData map[string]any
    // Common Vulnerabilities and Exposures (CVE) for the vulnerability.
    cve *string
    // The OdataType property
    odataType *string
    // Base Common Vulnerability Scoring System (CVSS) severity score for this vulnerability.
    severity *string
    // Indicates whether the detected vulnerability (file) was running at the time of detection or was the file detected at rest on the disk.
    wasRunning *bool
}
// NewVulnerabilityState instantiates a new VulnerabilityState and sets the default values.
func NewVulnerabilityState()(*VulnerabilityState) {
    m := &VulnerabilityState{
    }
    m.SetAdditionalData(make(map[string]any))
    return m
}
// CreateVulnerabilityStateFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateVulnerabilityStateFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewVulnerabilityState(), nil
}
// GetAdditionalData gets the AdditionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
// returns a map[string]any when successful
func (m *VulnerabilityState) GetAdditionalData()(map[string]any) {
    return m.additionalData
}
// GetCve gets the cve property value. Common Vulnerabilities and Exposures (CVE) for the vulnerability.
// returns a *string when successful
func (m *VulnerabilityState) GetCve()(*string) {
    return m.cve
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *VulnerabilityState) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := make(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error))
    res["cve"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetCve(val)
        }
        return nil
    }
    res["@odata.type"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetOdataType(val)
        }
        return nil
    }
    res["severity"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetSeverity(val)
        }
        return nil
    }
    res["wasRunning"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetBoolValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetWasRunning(val)
        }
        return nil
    }
    return res
}
// GetOdataType gets the @odata.type property value. The OdataType property
// returns a *string when successful
func (m *VulnerabilityState) GetOdataType()(*string) {
    return m.odataType
}
// GetSeverity gets the severity property value. Base Common Vulnerability Scoring System (CVSS) severity score for this vulnerability.
// returns a *string when successful
func (m *VulnerabilityState) GetSeverity()(*string) {
    return m.severity
}
// GetWasRunning gets the wasRunning property value. Indicates whether the detected vulnerability (file) was running at the time of detection or was the file detected at rest on the disk.
// returns a *bool when successful
func (m *VulnerabilityState) GetWasRunning()(*bool) {
    return m.wasRunning
}
// Serialize serializes information the current object
func (m *VulnerabilityState) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    {
        err := writer.WriteStringValue("cve", m.GetCve())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("@odata.type", m.GetOdataType())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("severity", m.GetSeverity())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteBoolValue("wasRunning", m.GetWasRunning())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteAdditionalData(m.GetAdditionalData())
        if err != nil {
            return err
        }
    }
    return nil
}
// SetAdditionalData sets the AdditionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
func (m *VulnerabilityState) SetAdditionalData(value map[string]any)() {
    m.additionalData = value
}
// SetCve sets the cve property value. Common Vulnerabilities and Exposures (CVE) for the vulnerability.
func (m *VulnerabilityState) SetCve(value *string)() {
    m.cve = value
}
// SetOdataType sets the @odata.type property value. The OdataType property
func (m *VulnerabilityState) SetOdataType(value *string)() {
    m.odataType = value
}
// SetSeverity sets the severity property value. Base Common Vulnerability Scoring System (CVSS) severity score for this vulnerability.
func (m *VulnerabilityState) SetSeverity(value *string)() {
    m.severity = value
}
// SetWasRunning sets the wasRunning property value. Indicates whether the detected vulnerability (file) was running at the time of detection or was the file detected at rest on the disk.
func (m *VulnerabilityState) SetWasRunning(value *bool)() {
    m.wasRunning = value
}
type VulnerabilityStateable interface {
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.AdditionalDataHolder
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    GetCve()(*string)
    GetOdataType()(*string)
    GetSeverity()(*string)
    GetWasRunning()(*bool)
    SetCve(value *string)()
    SetOdataType(value *string)()
    SetSeverity(value *string)()
    SetWasRunning(value *bool)()
}
