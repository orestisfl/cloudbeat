// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models
// App configuration key types.
type MdmAppConfigKeyType int

const (
    STRINGTYPE_MDMAPPCONFIGKEYTYPE MdmAppConfigKeyType = iota
    INTEGERTYPE_MDMAPPCONFIGKEYTYPE
    REALTYPE_MDMAPPCONFIGKEYTYPE
    BOOLEANTYPE_MDMAPPCONFIGKEYTYPE
    TOKENTYPE_MDMAPPCONFIGKEYTYPE
)

func (i MdmAppConfigKeyType) String() string {
    return []string{"stringType", "integerType", "realType", "booleanType", "tokenType"}[i]
}
func ParseMdmAppConfigKeyType(v string) (any, error) {
    result := STRINGTYPE_MDMAPPCONFIGKEYTYPE
    switch v {
        case "stringType":
            result = STRINGTYPE_MDMAPPCONFIGKEYTYPE
        case "integerType":
            result = INTEGERTYPE_MDMAPPCONFIGKEYTYPE
        case "realType":
            result = REALTYPE_MDMAPPCONFIGKEYTYPE
        case "booleanType":
            result = BOOLEANTYPE_MDMAPPCONFIGKEYTYPE
        case "tokenType":
            result = TOKENTYPE_MDMAPPCONFIGKEYTYPE
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializeMdmAppConfigKeyType(values []MdmAppConfigKeyType) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i MdmAppConfigKeyType) isMultiValue() bool {
    return false
}
