// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models
type CalendarRoleType int

const (
    NONE_CALENDARROLETYPE CalendarRoleType = iota
    FREEBUSYREAD_CALENDARROLETYPE
    LIMITEDREAD_CALENDARROLETYPE
    READ_CALENDARROLETYPE
    WRITE_CALENDARROLETYPE
    DELEGATEWITHOUTPRIVATEEVENTACCESS_CALENDARROLETYPE
    DELEGATEWITHPRIVATEEVENTACCESS_CALENDARROLETYPE
    CUSTOM_CALENDARROLETYPE
)

func (i CalendarRoleType) String() string {
    return []string{"none", "freeBusyRead", "limitedRead", "read", "write", "delegateWithoutPrivateEventAccess", "delegateWithPrivateEventAccess", "custom"}[i]
}
func ParseCalendarRoleType(v string) (any, error) {
    result := NONE_CALENDARROLETYPE
    switch v {
        case "none":
            result = NONE_CALENDARROLETYPE
        case "freeBusyRead":
            result = FREEBUSYREAD_CALENDARROLETYPE
        case "limitedRead":
            result = LIMITEDREAD_CALENDARROLETYPE
        case "read":
            result = READ_CALENDARROLETYPE
        case "write":
            result = WRITE_CALENDARROLETYPE
        case "delegateWithoutPrivateEventAccess":
            result = DELEGATEWITHOUTPRIVATEEVENTACCESS_CALENDARROLETYPE
        case "delegateWithPrivateEventAccess":
            result = DELEGATEWITHPRIVATEEVENTACCESS_CALENDARROLETYPE
        case "custom":
            result = CUSTOM_CALENDARROLETYPE
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializeCalendarRoleType(values []CalendarRoleType) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i CalendarRoleType) isMultiValue() bool {
    return false
}
