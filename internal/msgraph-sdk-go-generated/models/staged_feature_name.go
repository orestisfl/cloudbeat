// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models
type StagedFeatureName int

const (
    PASSTHROUGHAUTHENTICATION_STAGEDFEATURENAME StagedFeatureName = iota
    SEAMLESSSSO_STAGEDFEATURENAME
    PASSWORDHASHSYNC_STAGEDFEATURENAME
    EMAILASALTERNATEID_STAGEDFEATURENAME
    UNKNOWNFUTUREVALUE_STAGEDFEATURENAME
    CERTIFICATEBASEDAUTHENTICATION_STAGEDFEATURENAME
    MULTIFACTORAUTHENTICATION_STAGEDFEATURENAME
)

func (i StagedFeatureName) String() string {
    return []string{"passthroughAuthentication", "seamlessSso", "passwordHashSync", "emailAsAlternateId", "unknownFutureValue", "certificateBasedAuthentication", "multiFactorAuthentication"}[i]
}
func ParseStagedFeatureName(v string) (any, error) {
    result := PASSTHROUGHAUTHENTICATION_STAGEDFEATURENAME
    switch v {
        case "passthroughAuthentication":
            result = PASSTHROUGHAUTHENTICATION_STAGEDFEATURENAME
        case "seamlessSso":
            result = SEAMLESSSSO_STAGEDFEATURENAME
        case "passwordHashSync":
            result = PASSWORDHASHSYNC_STAGEDFEATURENAME
        case "emailAsAlternateId":
            result = EMAILASALTERNATEID_STAGEDFEATURENAME
        case "unknownFutureValue":
            result = UNKNOWNFUTUREVALUE_STAGEDFEATURENAME
        case "certificateBasedAuthentication":
            result = CERTIFICATEBASEDAUTHENTICATION_STAGEDFEATURENAME
        case "multiFactorAuthentication":
            result = MULTIFACTORAUTHENTICATION_STAGEDFEATURENAME
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializeStagedFeatureName(values []StagedFeatureName) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i StagedFeatureName) isMultiValue() bool {
    return false
}
